{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hacthon project Dphi\n",
    "### Eng: Dawood Hassan Ahmed AL-Waqedi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objective"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A hospital in the province of Greenland has been trying to improve its care conditions by looking at historic survival of the patients. They tried looking at their data but could not identify the main factors leading to high survivals."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# About the dataset\n",
    "The dataset contains the patient records collected from a hospital in Greenland. The \"Survived_1_year\" column is a target variable which has binary entries (0 or 1).\n",
    "\n",
    "Survived_1_year == 0, implies that the patient did not survive after 1 year of treatment\n",
    "\n",
    "Survived_1_year == 1, implies that the patient survived after 1 year of treatment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Description:\n",
    "\n",
    "ID_Patient_Care_Situation: Care situation of a patient during treatment\n",
    "\n",
    "Diagnosed_Condition: The diagnosed condition of the patient\n",
    "\n",
    "ID_Patient: Patient identifier number\n",
    "\n",
    "Treatment_with_drugs: Class of drugs used during treatment\n",
    "\n",
    "Survived_1_year: If the patient survived after one year (0 means did not survive; 1 means survived)\n",
    "\n",
    "Patient_Age: Age of the patient\n",
    "\n",
    "Patient_Body_Mass_Index: A calculated value based on the patientâ€™s weight, height, etc.\n",
    "\n",
    "Patient_Smoker: If the patient was a smoker or not\n",
    "\n",
    "Patient_Rural_Urban: If the patient stayed in Rural or Urban part of the country\n",
    "\n",
    "Previous_Condition: Condition of the patient before the start of the treatment ( This variable is splitted into 8 columns - A, B, C, D, E, F, Z and Number_of_prev_cond. A, B, C, D, E, F and Z are the previous conditions of the patient. Suppose for one patient, if the entry in column A is 1, it means that the previous condition of the patient was A. If the patient didn't have that condition, it is 0 and same for other conditions. If a patient has previous condition as A and C , columns A and C will have entries as 1 and 1 respectively while the other column B, D, E, F, Z will have entries 0, 0, 0, 0, 0 respectively. The column Number_of_prev_cond will have entry as 2 i.e. 1 + 0 + 1 + 0 + 0 + 0 + 0 + 0 = 2 in this case. )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "5947836b-5cfc-49d2-bef3-901e9777e4bf",
    "_uuid": "d9b13d276c84df6ba7fc79b6a8ccf54e31d5b456",
    "colab_type": "text",
    "id": "vBLQM98aURKe"
   },
   "source": [
    "# Loading Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {
    "_cell_guid": "ef7fab81-4f99-4d2d-b9fb-18b056865432",
    "_uuid": "771840a8c53d43ca662e633ab4421cbee035e75c",
    "colab": {},
    "colab_type": "code",
    "id": "iWsGI9C0URKg"
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import seaborn as sns \n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn\n",
    "from matplotlib import pyplot\n",
    "from pandas.plotting import scatter_matrix\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "a9bcd144-73c4-4e19-ad9b-ad82f90d44d3",
    "_uuid": "63109d31e43047e42ee70a915e339a157d5b54db",
    "colab_type": "text",
    "id": "wijZ0f8HURKu"
   },
   "source": [
    "# Loading the data\n",
    "We would use the pandas module to read the files. using the \"read_csv\" function. the files format is.csv (similar to .xls)\n",
    "\n",
    "In the round brackets we have the path to where the data is saves i.e on Github"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "metadata": {
    "_cell_guid": "57f44795-ca82-4e01-9595-7387851a6bce",
    "_uuid": "0c6d1e0ab1f4c92dfe988b4f5167c7a168cf8874",
    "colab": {},
    "colab_type": "code",
    "id": "GFecgnp-URKv"
   },
   "outputs": [],
   "source": [
    "pharma_data = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/pharma_data/Training_set_begs.csv')    \n",
    "test_data=pd.read_csv('e:test_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Let's check how our data looks. This can be done using head() method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {
    "_cell_guid": "309ef627-5cf8-4061-ae28-6c4e31c9177b",
    "_uuid": "72401960ad124e524810776d963b8163adcf8750",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "CHCzDCW0URK4",
    "outputId": "03495212-dcb6-41e0-eae7-ef399186d042"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Treated_with_drugs</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>Patient_Smoker</th>\n",
       "      <th>Patient_Rural_Urban</th>\n",
       "      <th>Patient_mental_condition</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>Z</th>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "      <th>Survived_1_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22374</td>\n",
       "      <td>8</td>\n",
       "      <td>3333</td>\n",
       "      <td>DX6</td>\n",
       "      <td>56</td>\n",
       "      <td>18.479385</td>\n",
       "      <td>YES</td>\n",
       "      <td>URBAN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18164</td>\n",
       "      <td>5</td>\n",
       "      <td>5740</td>\n",
       "      <td>DX2</td>\n",
       "      <td>36</td>\n",
       "      <td>22.945566</td>\n",
       "      <td>YES</td>\n",
       "      <td>RURAL</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6283</td>\n",
       "      <td>23</td>\n",
       "      <td>10446</td>\n",
       "      <td>DX6</td>\n",
       "      <td>48</td>\n",
       "      <td>27.510027</td>\n",
       "      <td>YES</td>\n",
       "      <td>RURAL</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5339</td>\n",
       "      <td>51</td>\n",
       "      <td>12011</td>\n",
       "      <td>DX1</td>\n",
       "      <td>5</td>\n",
       "      <td>19.130976</td>\n",
       "      <td>NO</td>\n",
       "      <td>URBAN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33012</td>\n",
       "      <td>0</td>\n",
       "      <td>12513</td>\n",
       "      <td>NaN</td>\n",
       "      <td>128</td>\n",
       "      <td>1.348400</td>\n",
       "      <td>Cannot say</td>\n",
       "      <td>RURAL</td>\n",
       "      <td>Stable</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_Patient_Care_Situation  Diagnosed_Condition  Patient_ID  \\\n",
       "0                      22374                    8        3333   \n",
       "1                      18164                    5        5740   \n",
       "2                       6283                   23       10446   \n",
       "3                       5339                   51       12011   \n",
       "4                      33012                    0       12513   \n",
       "\n",
       "  Treated_with_drugs  Patient_Age  Patient_Body_Mass_Index Patient_Smoker  \\\n",
       "0                DX6           56                18.479385            YES   \n",
       "1               DX2            36                22.945566            YES   \n",
       "2                DX6           48                27.510027            YES   \n",
       "3               DX1             5                19.130976             NO   \n",
       "4                NaN          128                 1.348400     Cannot say   \n",
       "\n",
       "  Patient_Rural_Urban Patient_mental_condition    A    B    C    D    E    F  \\\n",
       "0               URBAN                   Stable  1.0  0.0  0.0  0.0  1.0  0.0   \n",
       "1               RURAL                   Stable  1.0  0.0  0.0  0.0  0.0  0.0   \n",
       "2               RURAL                   Stable  1.0  0.0  0.0  0.0  0.0  0.0   \n",
       "3               URBAN                   Stable  1.0  0.0  0.0  0.0  0.0  0.0   \n",
       "4               RURAL                   Stable  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "     Z  Number_of_prev_cond  Survived_1_year  \n",
       "0  0.0                  2.0                0  \n",
       "1  0.0                  1.0                1  \n",
       "2  0.0                  1.0                0  \n",
       "3  0.0                  1.0                1  \n",
       "4  1.0                  1.0                1  "
      ]
     },
     "execution_count": 366,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Treated_with_drugs</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>Patient_Smoker</th>\n",
       "      <th>Patient_Rural_Urban</th>\n",
       "      <th>Patient_mental_condition</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>Z</th>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19150</td>\n",
       "      <td>40</td>\n",
       "      <td>3709</td>\n",
       "      <td>DX3</td>\n",
       "      <td>16</td>\n",
       "      <td>29.443894</td>\n",
       "      <td>NO</td>\n",
       "      <td>RURAL</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>23216</td>\n",
       "      <td>52</td>\n",
       "      <td>986</td>\n",
       "      <td>DX6</td>\n",
       "      <td>24</td>\n",
       "      <td>26.836321</td>\n",
       "      <td>NO</td>\n",
       "      <td>URBAN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11890</td>\n",
       "      <td>50</td>\n",
       "      <td>11821</td>\n",
       "      <td>DX4 DX5</td>\n",
       "      <td>63</td>\n",
       "      <td>25.523280</td>\n",
       "      <td>NO</td>\n",
       "      <td>RURAL</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7149</td>\n",
       "      <td>32</td>\n",
       "      <td>3292</td>\n",
       "      <td>DX6</td>\n",
       "      <td>42</td>\n",
       "      <td>27.171155</td>\n",
       "      <td>NO</td>\n",
       "      <td>URBAN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22845</td>\n",
       "      <td>20</td>\n",
       "      <td>9959</td>\n",
       "      <td>DX3</td>\n",
       "      <td>50</td>\n",
       "      <td>25.556192</td>\n",
       "      <td>NO</td>\n",
       "      <td>RURAL</td>\n",
       "      <td>Stable</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_Patient_Care_Situation  Diagnosed_Condition  Patient_ID  \\\n",
       "0                      19150                   40        3709   \n",
       "1                      23216                   52         986   \n",
       "2                      11890                   50       11821   \n",
       "3                       7149                   32        3292   \n",
       "4                      22845                   20        9959   \n",
       "\n",
       "  Treated_with_drugs  Patient_Age  Patient_Body_Mass_Index Patient_Smoker  \\\n",
       "0               DX3            16                29.443894             NO   \n",
       "1                DX6           24                26.836321             NO   \n",
       "2           DX4 DX5            63                25.523280             NO   \n",
       "3                DX6           42                27.171155             NO   \n",
       "4               DX3            50                25.556192             NO   \n",
       "\n",
       "  Patient_Rural_Urban Patient_mental_condition    A    B    C    D    E    F  \\\n",
       "0               RURAL                   Stable  1.0  0.0  0.0  0.0  1.0  0.0   \n",
       "1               URBAN                   Stable  1.0  1.0  0.0  0.0  0.0  0.0   \n",
       "2               RURAL                   Stable  1.0  0.0  0.0  0.0  1.0  0.0   \n",
       "3               URBAN                   Stable  1.0  0.0  1.0  0.0  1.0  0.0   \n",
       "4               RURAL                   Stable  1.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "     Z  Number_of_prev_cond  \n",
       "0  0.0                  2.0  \n",
       "1  0.0                  2.0  \n",
       "2  0.0                  2.0  \n",
       "3  0.0                  3.0  \n",
       "4  0.0                  1.0  "
      ]
     },
     "execution_count": 367,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le's explore the attributes / columns of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID_Patient_Care_Situation', 'Diagnosed_Condition', 'Patient_ID',\n",
       "       'Treated_with_drugs', 'Patient_Age', 'Patient_Body_Mass_Index',\n",
       "       'Patient_Smoker', 'Patient_Rural_Urban', 'Patient_mental_condition',\n",
       "       'A', 'B', 'C', 'D', 'E', 'F', 'Z', 'Number_of_prev_cond',\n",
       "       'Survived_1_year'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 368,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Target Variable:\n",
    "The target variable of a dataset is the feature of a dataset about which you want to gain a deeper understanding. It is the variable that is, or should be the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    14603\n",
       "0     8494\n",
       "Name: Survived_1_year, dtype: int64"
      ]
     },
     "execution_count": 369,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.Survived_1_year.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Input Variables:\n",
    "One or more variables that are used to determine (or predict) the 'Target Variable' are known as Input Variables. They are sometimes called Predictor Variable as well.\n",
    "\n",
    "In our example, the input variables are: 'ID_Patient_Care_Situation', 'Diagnosed_Condition', 'Patient_ID',\n",
    "       'Treated_with_drugs', 'Patient_Age', 'Patient_Body_Mass_Index',\n",
    "       'Patient_Smoker', 'Patient_Rural_Urban', 'Patient_mental_condition',\n",
    "       'A', 'B', 'C', 'D', 'E', 'F', 'Z', 'Number_of_prev_cond'\n",
    "\n",
    "All of these will help us predict the Survived_1_year of the wine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID_Patient_Care_Situation', 'Diagnosed_Condition', 'Patient_ID',\n",
       "       'Treated_with_drugs', 'Patient_Age', 'Patient_Body_Mass_Index',\n",
       "       'Patient_Smoker', 'Patient_Rural_Urban', 'Patient_mental_condition',\n",
       "       'A', 'B', 'C', 'D', 'E', 'F', 'Z', 'Number_of_prev_cond'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 370,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pharma_data.columns\n",
    "input_var=pharma_data.columns.drop('Survived_1_year')\n",
    "input_var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Variables/Features:\n",
    "ID_Patient_Care_Situation', 'Diagnosed_Condition',\n",
    "       'Treated_with_drugs', 'Patient_Age', 'Patient_Body_Mass_Index',\n",
    "       'Patient_Smoker', 'Patient_Rural_Urban', 'Patient_mental_condition',\n",
    "       'A', 'B', 'C', 'D', 'E', 'F', 'Z', 'Number_of_prev_cond' ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis (EDA)\n",
    "understanding the data. This step always helps in improving our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23097 entries, 0 to 23096\n",
      "Data columns (total 18 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   ID_Patient_Care_Situation  23097 non-null  int64  \n",
      " 1   Diagnosed_Condition        23097 non-null  int64  \n",
      " 2   Patient_ID                 23097 non-null  int64  \n",
      " 3   Treated_with_drugs         23084 non-null  object \n",
      " 4   Patient_Age                23097 non-null  int64  \n",
      " 5   Patient_Body_Mass_Index    23097 non-null  float64\n",
      " 6   Patient_Smoker             23097 non-null  object \n",
      " 7   Patient_Rural_Urban        23097 non-null  object \n",
      " 8   Patient_mental_condition   23097 non-null  object \n",
      " 9   A                          21862 non-null  float64\n",
      " 10  B                          21862 non-null  float64\n",
      " 11  C                          21862 non-null  float64\n",
      " 12  D                          21862 non-null  float64\n",
      " 13  E                          21862 non-null  float64\n",
      " 14  F                          21862 non-null  float64\n",
      " 15  Z                          21862 non-null  float64\n",
      " 16  Number_of_prev_cond        21862 non-null  float64\n",
      " 17  Survived_1_year            23097 non-null  int64  \n",
      "dtypes: float64(9), int64(5), object(4)\n",
      "memory usage: 3.2+ MB\n"
     ]
    }
   ],
   "source": [
    "pharma_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Treated_with_drugs',\n",
       " 'Patient_Smoker',\n",
       " 'Patient_Rural_Urban',\n",
       " 'Patient_mental_condition']"
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtype=(pharma_data.dtypes=='object')\n",
    "object_col=list(dtype[dtype].index)\n",
    "object_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DX6                     8606\n",
       "DX5                     1909\n",
       "DX2                     1904\n",
       "DX1                     1835\n",
       "DX3                     1830\n",
       "DX4                     1792\n",
       "DX3 DX4                  448\n",
       "DX1 DX2                  448\n",
       "DX1 DX3                  424\n",
       "DX4 DX5                  423\n",
       "DX2 DX4                  419\n",
       "DX1 DX4                  408\n",
       "DX3 DX5                  407\n",
       "DX1 DX5                  402\n",
       "DX2 DX5                  400\n",
       "DX2 DX3                  398\n",
       "DX1 DX2 DX5              103\n",
       "DX1 DX3 DX5              101\n",
       "DX1 DX2 DX4               99\n",
       "DX3 DX4 DX5               96\n",
       "DX1 DX2 DX3               95\n",
       "DX2 DX3 DX5               91\n",
       "DX1 DX3 DX4               90\n",
       "DX2 DX3 DX4               87\n",
       "DX2 DX4 DX5               84\n",
       "DX1 DX4 DX5               80\n",
       "DX1 DX2 DX3 DX4           24\n",
       "DX1 DX3 DX4 DX5           24\n",
       "DX2 DX3 DX4 DX5           22\n",
       "DX1 DX2 DX4 DX5           18\n",
       "DX1 DX2 DX3 DX5           14\n",
       "DX1 DX2 DX3 DX4 DX5        3\n",
       "Name: Treated_with_drugs, dtype: int64"
      ]
     },
     "execution_count": 373,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data['Treated_with_drugs'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unque of Treated_with_drugs  ['DX6' 'DX2 ' 'DX1 ' nan 'DX3 ' 'DX5 ' 'DX4 ' 'DX2 DX5 ' 'DX2 DX3 '\n",
      " 'DX1 DX3 ' 'DX1 DX2 ' 'DX3 DX4 ' 'DX1 DX4 ' 'DX1 DX5 ' 'DX2 DX4 DX5 '\n",
      " 'DX1 DX2 DX3 ' 'DX3 DX5 ' 'DX2 DX4 ' 'DX3 DX4 DX5 ' 'DX2 DX3 DX5 '\n",
      " 'DX1 DX2 DX3 DX4 ' 'DX4 DX5 ' 'DX2 DX3 DX4 ' 'DX1 DX4 DX5 '\n",
      " 'DX1 DX2 DX4 ' 'DX1 DX3 DX5 ' 'DX1 DX2 DX5 ' 'DX1 DX3 DX4 '\n",
      " 'DX1 DX3 DX4 DX5 ' 'DX1 DX2 DX4 DX5 ' 'DX2 DX3 DX4 DX5 '\n",
      " 'DX1 DX2 DX3 DX5 ' 'DX1 DX2 DX3 DX4 DX5 ']\n"
     ]
    }
   ],
   "source": [
    "print('unque of Treated_with_drugs ',pharma_data['Treated_with_drugs'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unque of Patient_Smoker  ['YES' 'NO' 'Cannot say']\n"
     ]
    }
   ],
   "source": [
    "print('unque of Patient_Smoker ',pharma_data['Patient_Smoker'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unque of Patient_Rural_Urban  ['URBAN' 'RURAL']\n"
     ]
    }
   ],
   "source": [
    "print('unque of Patient_Rural_Urban ',pharma_data['Patient_Rural_Urban'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unque of unque of Patient_mental_condition  ['Stable']\n"
     ]
    }
   ],
   "source": [
    "print('unque of unque of Patient_mental_condition ',pharma_data['Patient_mental_condition'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Undrstaning  count of rows in all columns it Null Data in Dataset :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID_Patient_Care_Situation       0\n",
       "Diagnosed_Condition             0\n",
       "Patient_ID                      0\n",
       "Treated_with_drugs             13\n",
       "Patient_Age                     0\n",
       "Patient_Body_Mass_Index         0\n",
       "Patient_Smoker                  0\n",
       "Patient_Rural_Urban             0\n",
       "Patient_mental_condition        0\n",
       "A                            1235\n",
       "B                            1235\n",
       "C                            1235\n",
       "D                            1235\n",
       "E                            1235\n",
       "F                            1235\n",
       "Z                            1235\n",
       "Number_of_prev_cond          1235\n",
       "Survived_1_year                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 378,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 379,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>Z</th>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "      <th>Survived_1_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>21862.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16545.712041</td>\n",
       "      <td>26.413127</td>\n",
       "      <td>6261.280772</td>\n",
       "      <td>33.209768</td>\n",
       "      <td>23.454820</td>\n",
       "      <td>0.897905</td>\n",
       "      <td>0.136355</td>\n",
       "      <td>0.185070</td>\n",
       "      <td>0.083615</td>\n",
       "      <td>0.393239</td>\n",
       "      <td>0.053700</td>\n",
       "      <td>0.000595</td>\n",
       "      <td>1.750480</td>\n",
       "      <td>0.632247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9532.263503</td>\n",
       "      <td>15.030865</td>\n",
       "      <td>3595.990620</td>\n",
       "      <td>19.549882</td>\n",
       "      <td>3.807661</td>\n",
       "      <td>0.302780</td>\n",
       "      <td>0.343173</td>\n",
       "      <td>0.388363</td>\n",
       "      <td>0.276817</td>\n",
       "      <td>0.488480</td>\n",
       "      <td>0.225431</td>\n",
       "      <td>0.024379</td>\n",
       "      <td>0.770311</td>\n",
       "      <td>0.482204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.089300</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8280.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>3181.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>20.205550</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>16597.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>6242.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>23.386199</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>24825.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>9363.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>26.788154</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>33014.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>12515.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>29.999579</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ID_Patient_Care_Situation  Diagnosed_Condition    Patient_ID  \\\n",
       "count               23097.000000         23097.000000  23097.000000   \n",
       "mean                16545.712041            26.413127   6261.280772   \n",
       "std                  9532.263503            15.030865   3595.990620   \n",
       "min                     2.000000             0.000000      1.000000   \n",
       "25%                  8280.000000            13.000000   3181.000000   \n",
       "50%                 16597.000000            26.000000   6242.000000   \n",
       "75%                 24825.000000            39.000000   9363.000000   \n",
       "max                 33014.000000            52.000000  12515.000000   \n",
       "\n",
       "        Patient_Age  Patient_Body_Mass_Index             A             B  \\\n",
       "count  23097.000000             23097.000000  21862.000000  21862.000000   \n",
       "mean      33.209768                23.454820      0.897905      0.136355   \n",
       "std       19.549882                 3.807661      0.302780      0.343173   \n",
       "min        0.000000                 1.089300      0.000000      0.000000   \n",
       "25%       16.000000                20.205550      1.000000      0.000000   \n",
       "50%       33.000000                23.386199      1.000000      0.000000   \n",
       "75%       50.000000                26.788154      1.000000      0.000000   \n",
       "max      149.000000                29.999579      1.000000      1.000000   \n",
       "\n",
       "                  C             D             E             F             Z  \\\n",
       "count  21862.000000  21862.000000  21862.000000  21862.000000  21862.000000   \n",
       "mean       0.185070      0.083615      0.393239      0.053700      0.000595   \n",
       "std        0.388363      0.276817      0.488480      0.225431      0.024379   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%        0.000000      0.000000      1.000000      0.000000      0.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "       Number_of_prev_cond  Survived_1_year  \n",
       "count         21862.000000     23097.000000  \n",
       "mean              1.750480         0.632247  \n",
       "std               0.770311         0.482204  \n",
       "min               1.000000         0.000000  \n",
       "25%               1.000000         0.000000  \n",
       "50%               2.000000         1.000000  \n",
       "75%               2.000000         1.000000  \n",
       "max               5.000000         1.000000  "
      ]
     },
     "execution_count": 380,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the a bove : Let's explore different statistical measures that we have got from desribe().\n",
    "\n",
    "count: total count of non-null values in the column mean: the average of all the values in that column min: the minimum value in the column max: the maximum value in the column 25%: first quartile in the column after we arrange those values in ascending order 50%: this is the median or the second quartile 75%: the third quartile std: this is the standard deviation (i.e. measure of depreciation, you must have read in the basics of statistics study material) Note: 25%, 50%, and 75% are nothing but corresponding percentile values\n",
    "\n",
    "Our brains are good at spotting patterns in pictures. Let's play around different types of data visualizations.\n",
    "\n",
    "We can check how each features are reated with others using corr() function.\n",
    "\n",
    "The correlation value ranges between -1 to 1.When it is close to 1, it means that there is a strong positive correlation. When the coefficient is close to â€“1, it means that there is a strong negative correlation. Finally, coefficients close to zero mean that there is no linear correlation. We can observe the detail information using correlation matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>Z</th>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "      <th>Survived_1_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.007446</td>\n",
       "      <td>0.000235</td>\n",
       "      <td>0.000304</td>\n",
       "      <td>-0.007259</td>\n",
       "      <td>0.004557</td>\n",
       "      <td>0.005110</td>\n",
       "      <td>0.010724</td>\n",
       "      <td>-0.006509</td>\n",
       "      <td>0.000575</td>\n",
       "      <td>0.007779</td>\n",
       "      <td>0.042146</td>\n",
       "      <td>0.011111</td>\n",
       "      <td>-0.004685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <td>-0.007446</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.008315</td>\n",
       "      <td>-0.008971</td>\n",
       "      <td>0.008305</td>\n",
       "      <td>0.004940</td>\n",
       "      <td>0.003936</td>\n",
       "      <td>-0.002826</td>\n",
       "      <td>-0.007843</td>\n",
       "      <td>0.007902</td>\n",
       "      <td>0.005931</td>\n",
       "      <td>-0.042806</td>\n",
       "      <td>0.004844</td>\n",
       "      <td>-0.004450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Patient_ID</th>\n",
       "      <td>0.000235</td>\n",
       "      <td>0.008315</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.014015</td>\n",
       "      <td>-0.023189</td>\n",
       "      <td>-0.005371</td>\n",
       "      <td>-0.012235</td>\n",
       "      <td>-0.006363</td>\n",
       "      <td>-0.004678</td>\n",
       "      <td>0.000746</td>\n",
       "      <td>0.007838</td>\n",
       "      <td>0.042348</td>\n",
       "      <td>-0.008344</td>\n",
       "      <td>-0.004214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Patient_Age</th>\n",
       "      <td>0.000304</td>\n",
       "      <td>-0.008971</td>\n",
       "      <td>0.014015</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.006560</td>\n",
       "      <td>-0.027559</td>\n",
       "      <td>-0.013554</td>\n",
       "      <td>-0.012989</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>-0.004523</td>\n",
       "      <td>0.006697</td>\n",
       "      <td>0.117190</td>\n",
       "      <td>-0.019371</td>\n",
       "      <td>-0.074934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <td>-0.007259</td>\n",
       "      <td>0.008305</td>\n",
       "      <td>-0.023189</td>\n",
       "      <td>-0.006560</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.019681</td>\n",
       "      <td>0.002384</td>\n",
       "      <td>-0.016850</td>\n",
       "      <td>-0.008383</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.015598</td>\n",
       "      <td>-0.140303</td>\n",
       "      <td>-0.014036</td>\n",
       "      <td>-0.121844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0.004557</td>\n",
       "      <td>0.004940</td>\n",
       "      <td>-0.005371</td>\n",
       "      <td>-0.027559</td>\n",
       "      <td>0.019681</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.063683</td>\n",
       "      <td>-0.089832</td>\n",
       "      <td>-0.076064</td>\n",
       "      <td>-0.163082</td>\n",
       "      <td>-0.054378</td>\n",
       "      <td>-0.072338</td>\n",
       "      <td>0.170448</td>\n",
       "      <td>-0.049886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.005110</td>\n",
       "      <td>0.003936</td>\n",
       "      <td>-0.012235</td>\n",
       "      <td>-0.013554</td>\n",
       "      <td>0.002384</td>\n",
       "      <td>-0.063683</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.021175</td>\n",
       "      <td>-0.002050</td>\n",
       "      <td>-0.017804</td>\n",
       "      <td>-0.016013</td>\n",
       "      <td>-0.009692</td>\n",
       "      <td>0.392773</td>\n",
       "      <td>-0.049805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>0.010724</td>\n",
       "      <td>-0.002826</td>\n",
       "      <td>-0.006363</td>\n",
       "      <td>-0.012989</td>\n",
       "      <td>-0.016850</td>\n",
       "      <td>-0.089832</td>\n",
       "      <td>-0.021175</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007528</td>\n",
       "      <td>-0.026294</td>\n",
       "      <td>0.000903</td>\n",
       "      <td>-0.011624</td>\n",
       "      <td>0.445349</td>\n",
       "      <td>-0.033356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>-0.006509</td>\n",
       "      <td>-0.007843</td>\n",
       "      <td>-0.004678</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>-0.008383</td>\n",
       "      <td>-0.076064</td>\n",
       "      <td>-0.002050</td>\n",
       "      <td>0.007528</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.013478</td>\n",
       "      <td>-0.009650</td>\n",
       "      <td>-0.007368</td>\n",
       "      <td>0.320736</td>\n",
       "      <td>-0.105710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>0.000575</td>\n",
       "      <td>0.007902</td>\n",
       "      <td>0.000746</td>\n",
       "      <td>-0.004523</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.163082</td>\n",
       "      <td>-0.017804</td>\n",
       "      <td>-0.026294</td>\n",
       "      <td>-0.013478</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.005260</td>\n",
       "      <td>-0.019637</td>\n",
       "      <td>0.541840</td>\n",
       "      <td>0.021527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>0.007779</td>\n",
       "      <td>0.005931</td>\n",
       "      <td>0.007838</td>\n",
       "      <td>0.006697</td>\n",
       "      <td>-0.015598</td>\n",
       "      <td>-0.054378</td>\n",
       "      <td>-0.016013</td>\n",
       "      <td>0.000903</td>\n",
       "      <td>-0.009650</td>\n",
       "      <td>-0.005260</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.005811</td>\n",
       "      <td>0.257609</td>\n",
       "      <td>0.004073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Z</th>\n",
       "      <td>0.042146</td>\n",
       "      <td>-0.042806</td>\n",
       "      <td>0.042348</td>\n",
       "      <td>0.117190</td>\n",
       "      <td>-0.140303</td>\n",
       "      <td>-0.072338</td>\n",
       "      <td>-0.009692</td>\n",
       "      <td>-0.011624</td>\n",
       "      <td>-0.007368</td>\n",
       "      <td>-0.019637</td>\n",
       "      <td>-0.005811</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.023765</td>\n",
       "      <td>0.018910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "      <td>0.011111</td>\n",
       "      <td>0.004844</td>\n",
       "      <td>-0.008344</td>\n",
       "      <td>-0.019371</td>\n",
       "      <td>-0.014036</td>\n",
       "      <td>0.170448</td>\n",
       "      <td>0.392773</td>\n",
       "      <td>0.445349</td>\n",
       "      <td>0.320736</td>\n",
       "      <td>0.541840</td>\n",
       "      <td>0.257609</td>\n",
       "      <td>-0.023765</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.081159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived_1_year</th>\n",
       "      <td>-0.004685</td>\n",
       "      <td>-0.004450</td>\n",
       "      <td>-0.004214</td>\n",
       "      <td>-0.074934</td>\n",
       "      <td>-0.121844</td>\n",
       "      <td>-0.049886</td>\n",
       "      <td>-0.049805</td>\n",
       "      <td>-0.033356</td>\n",
       "      <td>-0.105710</td>\n",
       "      <td>0.021527</td>\n",
       "      <td>0.004073</td>\n",
       "      <td>0.018910</td>\n",
       "      <td>-0.081159</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           ID_Patient_Care_Situation  Diagnosed_Condition  \\\n",
       "ID_Patient_Care_Situation                   1.000000            -0.007446   \n",
       "Diagnosed_Condition                        -0.007446             1.000000   \n",
       "Patient_ID                                  0.000235             0.008315   \n",
       "Patient_Age                                 0.000304            -0.008971   \n",
       "Patient_Body_Mass_Index                    -0.007259             0.008305   \n",
       "A                                           0.004557             0.004940   \n",
       "B                                           0.005110             0.003936   \n",
       "C                                           0.010724            -0.002826   \n",
       "D                                          -0.006509            -0.007843   \n",
       "E                                           0.000575             0.007902   \n",
       "F                                           0.007779             0.005931   \n",
       "Z                                           0.042146            -0.042806   \n",
       "Number_of_prev_cond                         0.011111             0.004844   \n",
       "Survived_1_year                            -0.004685            -0.004450   \n",
       "\n",
       "                           Patient_ID  Patient_Age  Patient_Body_Mass_Index  \\\n",
       "ID_Patient_Care_Situation    0.000235     0.000304                -0.007259   \n",
       "Diagnosed_Condition          0.008315    -0.008971                 0.008305   \n",
       "Patient_ID                   1.000000     0.014015                -0.023189   \n",
       "Patient_Age                  0.014015     1.000000                -0.006560   \n",
       "Patient_Body_Mass_Index     -0.023189    -0.006560                 1.000000   \n",
       "A                           -0.005371    -0.027559                 0.019681   \n",
       "B                           -0.012235    -0.013554                 0.002384   \n",
       "C                           -0.006363    -0.012989                -0.016850   \n",
       "D                           -0.004678     0.003471                -0.008383   \n",
       "E                            0.000746    -0.004523                -0.003661   \n",
       "F                            0.007838     0.006697                -0.015598   \n",
       "Z                            0.042348     0.117190                -0.140303   \n",
       "Number_of_prev_cond         -0.008344    -0.019371                -0.014036   \n",
       "Survived_1_year             -0.004214    -0.074934                -0.121844   \n",
       "\n",
       "                                  A         B         C         D         E  \\\n",
       "ID_Patient_Care_Situation  0.004557  0.005110  0.010724 -0.006509  0.000575   \n",
       "Diagnosed_Condition        0.004940  0.003936 -0.002826 -0.007843  0.007902   \n",
       "Patient_ID                -0.005371 -0.012235 -0.006363 -0.004678  0.000746   \n",
       "Patient_Age               -0.027559 -0.013554 -0.012989  0.003471 -0.004523   \n",
       "Patient_Body_Mass_Index    0.019681  0.002384 -0.016850 -0.008383 -0.003661   \n",
       "A                          1.000000 -0.063683 -0.089832 -0.076064 -0.163082   \n",
       "B                         -0.063683  1.000000 -0.021175 -0.002050 -0.017804   \n",
       "C                         -0.089832 -0.021175  1.000000  0.007528 -0.026294   \n",
       "D                         -0.076064 -0.002050  0.007528  1.000000 -0.013478   \n",
       "E                         -0.163082 -0.017804 -0.026294 -0.013478  1.000000   \n",
       "F                         -0.054378 -0.016013  0.000903 -0.009650 -0.005260   \n",
       "Z                         -0.072338 -0.009692 -0.011624 -0.007368 -0.019637   \n",
       "Number_of_prev_cond        0.170448  0.392773  0.445349  0.320736  0.541840   \n",
       "Survived_1_year           -0.049886 -0.049805 -0.033356 -0.105710  0.021527   \n",
       "\n",
       "                                  F         Z  Number_of_prev_cond  \\\n",
       "ID_Patient_Care_Situation  0.007779  0.042146             0.011111   \n",
       "Diagnosed_Condition        0.005931 -0.042806             0.004844   \n",
       "Patient_ID                 0.007838  0.042348            -0.008344   \n",
       "Patient_Age                0.006697  0.117190            -0.019371   \n",
       "Patient_Body_Mass_Index   -0.015598 -0.140303            -0.014036   \n",
       "A                         -0.054378 -0.072338             0.170448   \n",
       "B                         -0.016013 -0.009692             0.392773   \n",
       "C                          0.000903 -0.011624             0.445349   \n",
       "D                         -0.009650 -0.007368             0.320736   \n",
       "E                         -0.005260 -0.019637             0.541840   \n",
       "F                          1.000000 -0.005811             0.257609   \n",
       "Z                         -0.005811  1.000000            -0.023765   \n",
       "Number_of_prev_cond        0.257609 -0.023765             1.000000   \n",
       "Survived_1_year            0.004073  0.018910            -0.081159   \n",
       "\n",
       "                           Survived_1_year  \n",
       "ID_Patient_Care_Situation        -0.004685  \n",
       "Diagnosed_Condition              -0.004450  \n",
       "Patient_ID                       -0.004214  \n",
       "Patient_Age                      -0.074934  \n",
       "Patient_Body_Mass_Index          -0.121844  \n",
       "A                                -0.049886  \n",
       "B                                -0.049805  \n",
       "C                                -0.033356  \n",
       "D                                -0.105710  \n",
       "E                                 0.021527  \n",
       "F                                 0.004073  \n",
       "Z                                 0.018910  \n",
       "Number_of_prev_cond              -0.081159  \n",
       "Survived_1_year                   1.000000  "
      ]
     },
     "execution_count": 381,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check how each features are reated with others using corr() function.\n",
    "\n",
    "The correlation value ranges between -1 to 1.When it is close to 1, it means that there is a strong positive correlation. When the coefficient is close to â€“1, it means that there is a strong negative correlation. Finally, coefficients close to zero mean that there is no linear correlation. We can observe the detail information using correlation matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Visulation\n",
    "### Our brains are good at spotting patterns in pictures. Let's View around different types of data visualizations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Survived_1_year',data= pharma_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived_1_year')"
      ]
     },
     "execution_count": 383,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['Patient_Smoker'].hist(bins=30)\n",
    "plt.xlabel('Patient_Smoker')\n",
    "plt.ylabel('Survived_1_year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['Patient_Age'].hist(bins=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived_1_year')"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['Patient_Rural_Urban'].hist(bins=30)\n",
    "plt.xlabel('Patient_Rural_Urban')\n",
    "plt.ylabel('Survived_1_year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived_1_year')"
      ]
     },
     "execution_count": 386,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['Treated_with_drugs'].hist(bins=30)\n",
    "plt.xlabel('Treated_with_drugs')\n",
    "plt.ylabel('Survived_1_year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived_1_year')"
      ]
     },
     "execution_count": 387,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['ID_Patient_Care_Situation'].hist(bins=30)\n",
    "plt.xlabel('ID_Patient_Care_Situation')\n",
    "plt.ylabel('Survived_1_year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived_1_year')"
      ]
     },
     "execution_count": 388,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['Patient_Age'].hist(bins=30)\n",
    "plt.xlabel('Patient_Age')\n",
    "plt.ylabel('Survived_1_year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived_1_year')"
      ]
     },
     "execution_count": 389,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data['Patient_Body_Mass_Index'].hist(bins=30)\n",
    "plt.xlabel('Patient_Body_Mass_Index')\n",
    "plt.ylabel('Survived_1_year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 12))\n",
    "sns.heatmap(pharma_data.corr(), cmap='bwr', annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is always interesting to know the basic statistical characteristics of each numerical variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pre-Processing and Data Wrangling :\n",
    "#### One hot encoding : To make all variables numeric to feed to machine learning process further\n",
    "#### Impute Categorical Variables with mode of the variable "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First : One-Hot Encoding & Label Encoding\n",
    "In machine learning one-hot encoding is a frequently used method to deal with categorical data.\n",
    "Because many machine learning models need their input variables to be numeric, categorical variables need to be transformed in the pre-processing part."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### View data type categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Treated_with_drugs',\n",
       " 'Patient_Smoker',\n",
       " 'Patient_Rural_Urban',\n",
       " 'Patient_mental_condition']"
      ]
     },
     "execution_count": 391,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtype=(pharma_data.dtypes=='object')\n",
    "object_col=list(dtype[dtype].index)\n",
    "object_col"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dummy1 = pd.get_dummies(pharma_data['Patient_Rural_Urban'], drop_first=True)\n",
    "pharma_data= pd.concat([pharma_data, dummy1], axis=1).drop('Patient_Rural_Urban', axis=1)\n",
    "dummy2 = pd.get_dummies(pharma_data['Patient_Smoker'], drop_first=True)\n",
    "pharma_data= pd.concat([pharma_data, dummy2], axis=1).drop('Patient_Smoker', axis=1)\n",
    "dummy3= pd.get_dummies(pharma_data['Patient_mental_condition'], drop_first=True)\n",
    "pharma_data= pd.concat([pharma_data, dummy3], axis=1).drop('Patient_mental_condition', axis=1)\n",
    "dummy4= pd.get_dummies(pharma_data['Treated_with_drugs'], drop_first=True)\n",
    "pharma_data= pd.concat([pharma_data, dummy4], axis=1).drop('Treated_with_drugs', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dummy= pd.get_dummies(pharma_data, prefix_sep='_', drop_first=True)\n",
    "pharma_data= pd.concat([pharma_data,dummy], axis=1).drop(pharma_data, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cols= ['season','weather','weekday','month','yr']\n",
    "dummy = pd.get_dummies(pharma_data,prefix_sep='_' , drop_first=True)\n",
    "pharma_data= pd.concat([pharma_data,dummy], axis=1)\n",
    "pharma_data=dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy_test_data = pd.get_dummies(test_data,prefix_sep='_' , drop_first=True)\n",
    "test_data= pd.concat([test_data,dummy], axis=1)\n",
    "test_data=dummy_test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>...</th>\n",
       "      <th>Treated_with_drugs_DX3 DX4</th>\n",
       "      <th>Treated_with_drugs_DX3 DX4 DX5</th>\n",
       "      <th>Treated_with_drugs_DX3 DX5</th>\n",
       "      <th>Treated_with_drugs_DX4</th>\n",
       "      <th>Treated_with_drugs_DX4 DX5</th>\n",
       "      <th>Treated_with_drugs_DX5</th>\n",
       "      <th>Treated_with_drugs_DX6</th>\n",
       "      <th>Patient_Smoker_NO</th>\n",
       "      <th>Patient_Smoker_YES</th>\n",
       "      <th>Patient_Rural_Urban_URBAN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22374</td>\n",
       "      <td>8</td>\n",
       "      <td>3333</td>\n",
       "      <td>56</td>\n",
       "      <td>18.479385</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18164</td>\n",
       "      <td>5</td>\n",
       "      <td>5740</td>\n",
       "      <td>36</td>\n",
       "      <td>22.945566</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6283</td>\n",
       "      <td>23</td>\n",
       "      <td>10446</td>\n",
       "      <td>48</td>\n",
       "      <td>27.510027</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5339</td>\n",
       "      <td>51</td>\n",
       "      <td>12011</td>\n",
       "      <td>5</td>\n",
       "      <td>19.130976</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33012</td>\n",
       "      <td>0</td>\n",
       "      <td>12513</td>\n",
       "      <td>128</td>\n",
       "      <td>1.348400</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_Patient_Care_Situation  Diagnosed_Condition  Patient_ID  Patient_Age  \\\n",
       "0                      22374                    8        3333           56   \n",
       "1                      18164                    5        5740           36   \n",
       "2                       6283                   23       10446           48   \n",
       "3                       5339                   51       12011            5   \n",
       "4                      33012                    0       12513          128   \n",
       "\n",
       "   Patient_Body_Mass_Index    A    B    C    D    E  ...  \\\n",
       "0                18.479385  1.0  0.0  0.0  0.0  1.0  ...   \n",
       "1                22.945566  1.0  0.0  0.0  0.0  0.0  ...   \n",
       "2                27.510027  1.0  0.0  0.0  0.0  0.0  ...   \n",
       "3                19.130976  1.0  0.0  0.0  0.0  0.0  ...   \n",
       "4                 1.348400  0.0  0.0  0.0  0.0  0.0  ...   \n",
       "\n",
       "   Treated_with_drugs_DX3 DX4   Treated_with_drugs_DX3 DX4 DX5   \\\n",
       "0                            0                                0   \n",
       "1                            0                                0   \n",
       "2                            0                                0   \n",
       "3                            0                                0   \n",
       "4                            0                                0   \n",
       "\n",
       "   Treated_with_drugs_DX3 DX5   Treated_with_drugs_DX4   \\\n",
       "0                            0                        0   \n",
       "1                            0                        0   \n",
       "2                            0                        0   \n",
       "3                            0                        0   \n",
       "4                            0                        0   \n",
       "\n",
       "   Treated_with_drugs_DX4 DX5   Treated_with_drugs_DX5   \\\n",
       "0                            0                        0   \n",
       "1                            0                        0   \n",
       "2                            0                        0   \n",
       "3                            0                        0   \n",
       "4                            0                        0   \n",
       "\n",
       "   Treated_with_drugs_DX6  Patient_Smoker_NO  Patient_Smoker_YES  \\\n",
       "0                       1                  0                   1   \n",
       "1                       0                  0                   1   \n",
       "2                       1                  0                   1   \n",
       "3                       0                  1                   0   \n",
       "4                       0                  0                   0   \n",
       "\n",
       "   Patient_Rural_Urban_URBAN  \n",
       "0                          1  \n",
       "1                          0  \n",
       "2                          0  \n",
       "3                          1  \n",
       "4                          0  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 394,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Second :  Filling Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [],
   "source": [
    "impute_col=pharma_data.iloc[:,[5,6,7,8,9,10,11,12,13,14,15,16,17]]\n",
    "from sklearn.impute import SimpleImputer\n",
    "my_impute=SimpleImputer()\n",
    "imputed=pd.DataFrame(my_impute.fit_transform(impute_col))\n",
    "imputed.columns=impute_col.columns\n",
    "data1=pharma_data.drop(impute_col,axis=1)\n",
    "pharma_data=pd.concat([data1,imputed],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID_Patient_Care_Situation                  0\n",
       "Diagnosed_Condition                        0\n",
       "Patient_ID                                 0\n",
       "Patient_Age                                0\n",
       "Patient_Body_Mass_Index                    0\n",
       "Treated_with_drugs_DX1 DX2 DX3 DX5         0\n",
       "Treated_with_drugs_DX1 DX2 DX4             0\n",
       "Treated_with_drugs_DX1 DX2 DX4 DX5         0\n",
       "Treated_with_drugs_DX1 DX2 DX5             0\n",
       "Treated_with_drugs_DX1 DX3                 0\n",
       "Treated_with_drugs_DX1 DX3 DX4             0\n",
       "Treated_with_drugs_DX1 DX3 DX4 DX5         0\n",
       "Treated_with_drugs_DX1 DX3 DX5             0\n",
       "Treated_with_drugs_DX1 DX4                 0\n",
       "Treated_with_drugs_DX1 DX4 DX5             0\n",
       "Treated_with_drugs_DX1 DX5                 0\n",
       "Treated_with_drugs_DX2                     0\n",
       "Treated_with_drugs_DX2 DX3                 0\n",
       "Treated_with_drugs_DX2 DX3 DX4             0\n",
       "Treated_with_drugs_DX2 DX3 DX4 DX5         0\n",
       "Treated_with_drugs_DX2 DX3 DX5             0\n",
       "Treated_with_drugs_DX2 DX4                 0\n",
       "Treated_with_drugs_DX2 DX4 DX5             0\n",
       "Treated_with_drugs_DX2 DX5                 0\n",
       "Treated_with_drugs_DX3                     0\n",
       "Treated_with_drugs_DX3 DX4                 0\n",
       "Treated_with_drugs_DX3 DX4 DX5             0\n",
       "Treated_with_drugs_DX3 DX5                 0\n",
       "Treated_with_drugs_DX4                     0\n",
       "Treated_with_drugs_DX4 DX5                 0\n",
       "Treated_with_drugs_DX5                     0\n",
       "Treated_with_drugs_DX6                     0\n",
       "Patient_Smoker_NO                          0\n",
       "Patient_Smoker_YES                         0\n",
       "Patient_Rural_Urban_URBAN                  0\n",
       "A                                          0\n",
       "B                                          0\n",
       "C                                          0\n",
       "D                                          0\n",
       "E                                          0\n",
       "F                                          0\n",
       "Z                                          0\n",
       "Number_of_prev_cond                        0\n",
       "Survived_1_year                            0\n",
       "Treated_with_drugs_DX1 DX2                 0\n",
       "Treated_with_drugs_DX1 DX2 DX3             0\n",
       "Treated_with_drugs_DX1 DX2 DX3 DX4         0\n",
       "Treated_with_drugs_DX1 DX2 DX3 DX4 DX5     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23097 entries, 0 to 23096\n",
      "Data columns (total 48 columns):\n",
      " #   Column                                   Non-Null Count  Dtype  \n",
      "---  ------                                   --------------  -----  \n",
      " 0   ID_Patient_Care_Situation                23097 non-null  int64  \n",
      " 1   Diagnosed_Condition                      23097 non-null  int64  \n",
      " 2   Patient_ID                               23097 non-null  int64  \n",
      " 3   Patient_Age                              23097 non-null  int64  \n",
      " 4   Patient_Body_Mass_Index                  23097 non-null  float64\n",
      " 5   Treated_with_drugs_DX1 DX2 DX3 DX5       23097 non-null  uint8  \n",
      " 6   Treated_with_drugs_DX1 DX2 DX4           23097 non-null  uint8  \n",
      " 7   Treated_with_drugs_DX1 DX2 DX4 DX5       23097 non-null  uint8  \n",
      " 8   Treated_with_drugs_DX1 DX2 DX5           23097 non-null  uint8  \n",
      " 9   Treated_with_drugs_DX1 DX3               23097 non-null  uint8  \n",
      " 10  Treated_with_drugs_DX1 DX3 DX4           23097 non-null  uint8  \n",
      " 11  Treated_with_drugs_DX1 DX3 DX4 DX5       23097 non-null  uint8  \n",
      " 12  Treated_with_drugs_DX1 DX3 DX5           23097 non-null  uint8  \n",
      " 13  Treated_with_drugs_DX1 DX4               23097 non-null  uint8  \n",
      " 14  Treated_with_drugs_DX1 DX4 DX5           23097 non-null  uint8  \n",
      " 15  Treated_with_drugs_DX1 DX5               23097 non-null  uint8  \n",
      " 16  Treated_with_drugs_DX2                   23097 non-null  uint8  \n",
      " 17  Treated_with_drugs_DX2 DX3               23097 non-null  uint8  \n",
      " 18  Treated_with_drugs_DX2 DX3 DX4           23097 non-null  uint8  \n",
      " 19  Treated_with_drugs_DX2 DX3 DX4 DX5       23097 non-null  uint8  \n",
      " 20  Treated_with_drugs_DX2 DX3 DX5           23097 non-null  uint8  \n",
      " 21  Treated_with_drugs_DX2 DX4               23097 non-null  uint8  \n",
      " 22  Treated_with_drugs_DX2 DX4 DX5           23097 non-null  uint8  \n",
      " 23  Treated_with_drugs_DX2 DX5               23097 non-null  uint8  \n",
      " 24  Treated_with_drugs_DX3                   23097 non-null  uint8  \n",
      " 25  Treated_with_drugs_DX3 DX4               23097 non-null  uint8  \n",
      " 26  Treated_with_drugs_DX3 DX4 DX5           23097 non-null  uint8  \n",
      " 27  Treated_with_drugs_DX3 DX5               23097 non-null  uint8  \n",
      " 28  Treated_with_drugs_DX4                   23097 non-null  uint8  \n",
      " 29  Treated_with_drugs_DX4 DX5               23097 non-null  uint8  \n",
      " 30  Treated_with_drugs_DX5                   23097 non-null  uint8  \n",
      " 31  Treated_with_drugs_DX6                   23097 non-null  uint8  \n",
      " 32  Patient_Smoker_NO                        23097 non-null  uint8  \n",
      " 33  Patient_Smoker_YES                       23097 non-null  uint8  \n",
      " 34  Patient_Rural_Urban_URBAN                23097 non-null  uint8  \n",
      " 35  A                                        23097 non-null  float64\n",
      " 36  B                                        23097 non-null  float64\n",
      " 37  C                                        23097 non-null  float64\n",
      " 38  D                                        23097 non-null  float64\n",
      " 39  E                                        23097 non-null  float64\n",
      " 40  F                                        23097 non-null  float64\n",
      " 41  Z                                        23097 non-null  float64\n",
      " 42  Number_of_prev_cond                      23097 non-null  float64\n",
      " 43  Survived_1_year                          23097 non-null  float64\n",
      " 44  Treated_with_drugs_DX1 DX2               23097 non-null  float64\n",
      " 45  Treated_with_drugs_DX1 DX2 DX3           23097 non-null  float64\n",
      " 46  Treated_with_drugs_DX1 DX2 DX3 DX4       23097 non-null  float64\n",
      " 47  Treated_with_drugs_DX1 DX2 DX3 DX4 DX5   23097 non-null  float64\n",
      "dtypes: float64(14), int64(4), uint8(30)\n",
      "memory usage: 3.8 MB\n"
     ]
    }
   ],
   "source": [
    "pharma_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3 DX5</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX4</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX4 DX5</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX5</th>\n",
       "      <th>Treated_with_drugs_DX1 DX3</th>\n",
       "      <th>...</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>Z</th>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "      <th>Survived_1_year</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3 DX4</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3 DX4 DX5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22374</td>\n",
       "      <td>8</td>\n",
       "      <td>3333</td>\n",
       "      <td>56</td>\n",
       "      <td>18.479385</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18164</td>\n",
       "      <td>5</td>\n",
       "      <td>5740</td>\n",
       "      <td>36</td>\n",
       "      <td>22.945566</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6283</td>\n",
       "      <td>23</td>\n",
       "      <td>10446</td>\n",
       "      <td>48</td>\n",
       "      <td>27.510027</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5339</td>\n",
       "      <td>51</td>\n",
       "      <td>12011</td>\n",
       "      <td>5</td>\n",
       "      <td>19.130976</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33012</td>\n",
       "      <td>0</td>\n",
       "      <td>12513</td>\n",
       "      <td>128</td>\n",
       "      <td>1.348400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_Patient_Care_Situation  Diagnosed_Condition  Patient_ID  Patient_Age  \\\n",
       "0                      22374                    8        3333           56   \n",
       "1                      18164                    5        5740           36   \n",
       "2                       6283                   23       10446           48   \n",
       "3                       5339                   51       12011            5   \n",
       "4                      33012                    0       12513          128   \n",
       "\n",
       "   Patient_Body_Mass_Index  Treated_with_drugs_DX1 DX2 DX3 DX5   \\\n",
       "0                18.479385                                    0   \n",
       "1                22.945566                                    0   \n",
       "2                27.510027                                    0   \n",
       "3                19.130976                                    0   \n",
       "4                 1.348400                                    0   \n",
       "\n",
       "   Treated_with_drugs_DX1 DX2 DX4   Treated_with_drugs_DX1 DX2 DX4 DX5   \\\n",
       "0                                0                                    0   \n",
       "1                                0                                    0   \n",
       "2                                0                                    0   \n",
       "3                                0                                    0   \n",
       "4                                0                                    0   \n",
       "\n",
       "   Treated_with_drugs_DX1 DX2 DX5   Treated_with_drugs_DX1 DX3   ...    D  \\\n",
       "0                                0                            0  ...  0.0   \n",
       "1                                0                            0  ...  0.0   \n",
       "2                                0                            0  ...  0.0   \n",
       "3                                0                            0  ...  0.0   \n",
       "4                                0                            0  ...  0.0   \n",
       "\n",
       "     E    F    Z  Number_of_prev_cond  Survived_1_year  \\\n",
       "0  1.0  0.0  0.0                  2.0              0.0   \n",
       "1  0.0  0.0  0.0                  1.0              1.0   \n",
       "2  0.0  0.0  0.0                  1.0              0.0   \n",
       "3  0.0  0.0  0.0                  1.0              1.0   \n",
       "4  0.0  0.0  1.0                  1.0              1.0   \n",
       "\n",
       "   Treated_with_drugs_DX1 DX2   Treated_with_drugs_DX1 DX2 DX3   \\\n",
       "0                          0.0                              0.0   \n",
       "1                          0.0                              0.0   \n",
       "2                          0.0                              0.0   \n",
       "3                          0.0                              0.0   \n",
       "4                          0.0                              0.0   \n",
       "\n",
       "   Treated_with_drugs_DX1 DX2 DX3 DX4   \\\n",
       "0                                  0.0   \n",
       "1                                  0.0   \n",
       "2                                  0.0   \n",
       "3                                  0.0   \n",
       "4                                  0.0   \n",
       "\n",
       "   Treated_with_drugs_DX1 DX2 DX3 DX4 DX5   \n",
       "0                                      0.0  \n",
       "1                                      0.0  \n",
       "2                                      0.0  \n",
       "3                                      0.0  \n",
       "4                                      0.0  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>...</th>\n",
       "      <th>Treated_with_drugs_DX3</th>\n",
       "      <th>Treated_with_drugs_DX3 DX4</th>\n",
       "      <th>Treated_with_drugs_DX3 DX4 DX5</th>\n",
       "      <th>Treated_with_drugs_DX3 DX5</th>\n",
       "      <th>Treated_with_drugs_DX4</th>\n",
       "      <th>Treated_with_drugs_DX4 DX5</th>\n",
       "      <th>Treated_with_drugs_DX5</th>\n",
       "      <th>Treated_with_drugs_DX6</th>\n",
       "      <th>Patient_Smoker_YES</th>\n",
       "      <th>Patient_Rural_Urban_URBAN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19150</td>\n",
       "      <td>40</td>\n",
       "      <td>3709</td>\n",
       "      <td>16</td>\n",
       "      <td>29.443894</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>23216</td>\n",
       "      <td>52</td>\n",
       "      <td>986</td>\n",
       "      <td>24</td>\n",
       "      <td>26.836321</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11890</td>\n",
       "      <td>50</td>\n",
       "      <td>11821</td>\n",
       "      <td>63</td>\n",
       "      <td>25.523280</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7149</td>\n",
       "      <td>32</td>\n",
       "      <td>3292</td>\n",
       "      <td>42</td>\n",
       "      <td>27.171155</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22845</td>\n",
       "      <td>20</td>\n",
       "      <td>9959</td>\n",
       "      <td>50</td>\n",
       "      <td>25.556192</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 46 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_Patient_Care_Situation  Diagnosed_Condition  Patient_ID  Patient_Age  \\\n",
       "0                      19150                   40        3709           16   \n",
       "1                      23216                   52         986           24   \n",
       "2                      11890                   50       11821           63   \n",
       "3                       7149                   32        3292           42   \n",
       "4                      22845                   20        9959           50   \n",
       "\n",
       "   Patient_Body_Mass_Index    A    B    C    D    E  ...  \\\n",
       "0                29.443894  1.0  0.0  0.0  0.0  1.0  ...   \n",
       "1                26.836321  1.0  1.0  0.0  0.0  0.0  ...   \n",
       "2                25.523280  1.0  0.0  0.0  0.0  1.0  ...   \n",
       "3                27.171155  1.0  0.0  1.0  0.0  1.0  ...   \n",
       "4                25.556192  1.0  0.0  0.0  0.0  0.0  ...   \n",
       "\n",
       "   Treated_with_drugs_DX3   Treated_with_drugs_DX3 DX4   \\\n",
       "0                        1                            0   \n",
       "1                        0                            0   \n",
       "2                        0                            0   \n",
       "3                        0                            0   \n",
       "4                        1                            0   \n",
       "\n",
       "   Treated_with_drugs_DX3 DX4 DX5   Treated_with_drugs_DX3 DX5   \\\n",
       "0                                0                            0   \n",
       "1                                0                            0   \n",
       "2                                0                            0   \n",
       "3                                0                            0   \n",
       "4                                0                            0   \n",
       "\n",
       "   Treated_with_drugs_DX4   Treated_with_drugs_DX4 DX5   \\\n",
       "0                        0                            0   \n",
       "1                        0                            0   \n",
       "2                        0                            1   \n",
       "3                        0                            0   \n",
       "4                        0                            0   \n",
       "\n",
       "   Treated_with_drugs_DX5   Treated_with_drugs_DX6  Patient_Smoker_YES  \\\n",
       "0                        0                       0                   0   \n",
       "1                        0                       1                   0   \n",
       "2                        0                       0                   0   \n",
       "3                        0                       1                   0   \n",
       "4                        0                       0                   0   \n",
       "\n",
       "   Patient_Rural_Urban_URBAN  \n",
       "0                          0  \n",
       "1                          1  \n",
       "2                          0  \n",
       "3                          1  \n",
       "4                          0  \n",
       "\n",
       "[5 rows x 46 columns]"
      ]
     },
     "execution_count": 399,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### empty column list indicates no variable has missing values anymore  !column[Treated_with_drugs]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory Data Analysis (EDA) after Pre-Processing and Data Wrangling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_Patient_Care_Situation</th>\n",
       "      <th>Diagnosed_Condition</th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Patient_Age</th>\n",
       "      <th>Patient_Body_Mass_Index</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3 DX5</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX4</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX4 DX5</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX5</th>\n",
       "      <th>Treated_with_drugs_DX1 DX3</th>\n",
       "      <th>...</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>Z</th>\n",
       "      <th>Number_of_prev_cond</th>\n",
       "      <th>Survived_1_year</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3 DX4</th>\n",
       "      <th>Treated_with_drugs_DX1 DX2 DX3 DX4 DX5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "      <td>23097.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16545.712041</td>\n",
       "      <td>26.413127</td>\n",
       "      <td>6261.280772</td>\n",
       "      <td>33.209768</td>\n",
       "      <td>23.454820</td>\n",
       "      <td>0.000606</td>\n",
       "      <td>0.004286</td>\n",
       "      <td>0.000779</td>\n",
       "      <td>0.004459</td>\n",
       "      <td>0.018357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.083615</td>\n",
       "      <td>0.393239</td>\n",
       "      <td>0.053700</td>\n",
       "      <td>0.000595</td>\n",
       "      <td>1.750480</td>\n",
       "      <td>0.632247</td>\n",
       "      <td>0.019396</td>\n",
       "      <td>0.004113</td>\n",
       "      <td>0.001039</td>\n",
       "      <td>0.000130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9532.263503</td>\n",
       "      <td>15.030865</td>\n",
       "      <td>3595.990620</td>\n",
       "      <td>19.549882</td>\n",
       "      <td>3.807661</td>\n",
       "      <td>0.024613</td>\n",
       "      <td>0.065331</td>\n",
       "      <td>0.027906</td>\n",
       "      <td>0.066632</td>\n",
       "      <td>0.134243</td>\n",
       "      <td>...</td>\n",
       "      <td>0.269314</td>\n",
       "      <td>0.475241</td>\n",
       "      <td>0.219321</td>\n",
       "      <td>0.023718</td>\n",
       "      <td>0.749433</td>\n",
       "      <td>0.482204</td>\n",
       "      <td>0.137917</td>\n",
       "      <td>0.064003</td>\n",
       "      <td>0.032219</td>\n",
       "      <td>0.011396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.089300</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8280.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>3181.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>20.205550</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>16597.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>6242.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>23.386199</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>24825.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>9363.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>26.788154</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>33014.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>12515.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>29.999579</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       ID_Patient_Care_Situation  Diagnosed_Condition    Patient_ID  \\\n",
       "count               23097.000000         23097.000000  23097.000000   \n",
       "mean                16545.712041            26.413127   6261.280772   \n",
       "std                  9532.263503            15.030865   3595.990620   \n",
       "min                     2.000000             0.000000      1.000000   \n",
       "25%                  8280.000000            13.000000   3181.000000   \n",
       "50%                 16597.000000            26.000000   6242.000000   \n",
       "75%                 24825.000000            39.000000   9363.000000   \n",
       "max                 33014.000000            52.000000  12515.000000   \n",
       "\n",
       "        Patient_Age  Patient_Body_Mass_Index  \\\n",
       "count  23097.000000             23097.000000   \n",
       "mean      33.209768                23.454820   \n",
       "std       19.549882                 3.807661   \n",
       "min        0.000000                 1.089300   \n",
       "25%       16.000000                20.205550   \n",
       "50%       33.000000                23.386199   \n",
       "75%       50.000000                26.788154   \n",
       "max      149.000000                29.999579   \n",
       "\n",
       "       Treated_with_drugs_DX1 DX2 DX3 DX5   Treated_with_drugs_DX1 DX2 DX4   \\\n",
       "count                         23097.000000                     23097.000000   \n",
       "mean                              0.000606                         0.004286   \n",
       "std                               0.024613                         0.065331   \n",
       "min                               0.000000                         0.000000   \n",
       "25%                               0.000000                         0.000000   \n",
       "50%                               0.000000                         0.000000   \n",
       "75%                               0.000000                         0.000000   \n",
       "max                               1.000000                         1.000000   \n",
       "\n",
       "       Treated_with_drugs_DX1 DX2 DX4 DX5   Treated_with_drugs_DX1 DX2 DX5   \\\n",
       "count                         23097.000000                     23097.000000   \n",
       "mean                              0.000779                         0.004459   \n",
       "std                               0.027906                         0.066632   \n",
       "min                               0.000000                         0.000000   \n",
       "25%                               0.000000                         0.000000   \n",
       "50%                               0.000000                         0.000000   \n",
       "75%                               0.000000                         0.000000   \n",
       "max                               1.000000                         1.000000   \n",
       "\n",
       "       Treated_with_drugs_DX1 DX3   ...             D             E  \\\n",
       "count                 23097.000000  ...  23097.000000  23097.000000   \n",
       "mean                      0.018357  ...      0.083615      0.393239   \n",
       "std                       0.134243  ...      0.269314      0.475241   \n",
       "min                       0.000000  ...      0.000000      0.000000   \n",
       "25%                       0.000000  ...      0.000000      0.000000   \n",
       "50%                       0.000000  ...      0.000000      0.000000   \n",
       "75%                       0.000000  ...      0.000000      1.000000   \n",
       "max                       1.000000  ...      1.000000      1.000000   \n",
       "\n",
       "                  F             Z  Number_of_prev_cond  Survived_1_year  \\\n",
       "count  23097.000000  23097.000000         23097.000000     23097.000000   \n",
       "mean       0.053700      0.000595             1.750480         0.632247   \n",
       "std        0.219321      0.023718             0.749433         0.482204   \n",
       "min        0.000000      0.000000             1.000000         0.000000   \n",
       "25%        0.000000      0.000000             1.000000         0.000000   \n",
       "50%        0.000000      0.000000             2.000000         1.000000   \n",
       "75%        0.000000      0.000000             2.000000         1.000000   \n",
       "max        1.000000      1.000000             5.000000         1.000000   \n",
       "\n",
       "       Treated_with_drugs_DX1 DX2   Treated_with_drugs_DX1 DX2 DX3   \\\n",
       "count                 23097.000000                     23097.000000   \n",
       "mean                      0.019396                         0.004113   \n",
       "std                       0.137917                         0.064003   \n",
       "min                       0.000000                         0.000000   \n",
       "25%                       0.000000                         0.000000   \n",
       "50%                       0.000000                         0.000000   \n",
       "75%                       0.000000                         0.000000   \n",
       "max                       1.000000                         1.000000   \n",
       "\n",
       "       Treated_with_drugs_DX1 DX2 DX3 DX4   \\\n",
       "count                         23097.000000   \n",
       "mean                              0.001039   \n",
       "std                               0.032219   \n",
       "min                               0.000000   \n",
       "25%                               0.000000   \n",
       "50%                               0.000000   \n",
       "75%                               0.000000   \n",
       "max                               1.000000   \n",
       "\n",
       "       Treated_with_drugs_DX1 DX2 DX3 DX4 DX5   \n",
       "count                             23097.000000  \n",
       "mean                                  0.000130  \n",
       "std                                   0.011396  \n",
       "min                                   0.000000  \n",
       "25%                                   0.000000  \n",
       "50%                                   0.000000  \n",
       "75%                                   0.000000  \n",
       "max                                   1.000000  \n",
       "\n",
       "[8 rows x 48 columns]"
      ]
     },
     "execution_count": 400,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pharma_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Visulation\n",
    "Our brains are good at spotting patterns in pictures. Let's View around different types of data visualizations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 49 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pharma_data.hist(bins=10,figsize=(16,12))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can plot the above correlation matrix using heatmaps too. The visualization using heatmap is a pictorial visualization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building ML Model\n",
    "#### Now we are finally ready, and we can train the model.\n",
    "\n",
    "#### First, we need to import our model - A decision tree classifier (again, using the sklearn library).\n",
    "\n",
    "#### Then we would feed the model both with the data (X_train) and the answers for that data (y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  first : Omit irrelevant columns\n",
    "##### Let us only take the columns we find relevant. ID columns are never relevant (or at least should not be, if the data was sampled randomly). As our model is very simple, let us also omit the Ticket number, Cabin, ID and Name although more sophisticated models can definitely take advantage of them"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# second: Separating input variables (X) and target variable (y)\n",
    "### Y has the labels, our answers column. X is all the rest of the data - the features, without the labels (The survived column). This sepration would hoepfully be clearer in a few cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = pharma_data.drop(['Survived_1_year','Patient_ID'], axis = 1)\n",
    "y = pharma_data['Survived_1_year']\n",
    "#test_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train and Test Split\n",
    "#### We have our training data, and we have our test data. but in order to evaluate our model we need to split the training dataset into a train dataset and a test dataset. The test data would be used to evaluate the model, while the training data would be used to train the data.\n",
    "\n",
    "#### To do that, we can use the function \"train_test_split\" from the sklearn module. the sklean module is probably the most commonly used library in most simple machine learning tasks (this does not include deep learning where other libraries can be more popular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train,y_test = train_test_split(x, y, test_size = 0.3, random_state = 123)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building ML Model\n",
    "Now we are finally ready, and we can train the model.\n",
    "\n",
    "First, we need to import our model - A decision tree classifier (again, using the sklearn library).\n",
    "\n",
    "Then we would feed the model both with the data (X_train) and the answers for that data (y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "model1=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [],
   "source": [
    "model1=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 425,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test_data_test=test_data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate the model\n",
    "##### Now we have a model. Let's evaulate it with using the accuracy_score function. This output of the function is the number of right answers (passengers survival/death was predicted correctly) divided by the total number of passengers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=model1.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1., 1., ..., 0., 1., 1.])"
      ]
     },
     "execution_count": 428,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., ..., 1., 1., 1.])"
      ]
     },
     "execution_count": 429,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy... 0.6307911177089133\n",
      "Test accuracy 0.6337662337662338\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "print('Training accuracy...', accuracy_score(y_train, model1.predict(x_train)))\n",
    "print('Test accuracy', accuracy_score(y_test,model1.predict(x_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0, 2536],\n",
       "       [   2, 4392]], dtype=int64)"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "print('Training accuracy...', accuracy_score(y_train, model1.predict(x_train)))\n",
    "print('Test accuracy', accuracy_score(y_test,model1.predict(pharma_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Execute this model of test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_data_test=model1.predict(x_test_data_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., ..., 0., 0., 0.])"
      ]
     },
     "execution_count": 433,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_data_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "metadata": {},
   "outputs": [],
   "source": [
    "Sample_Submission=pd.read_csv('e:Sample_Submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0],\n",
       "       [0],\n",
       "       [0],\n",
       "       ...,\n",
       "       [0],\n",
       "       [0],\n",
       "       [0]], dtype=int64)"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sample_Submission.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy... 0.6307911177089133\n",
      "Test accuracy 0.9832312157368591\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "print('Training accuracy...', accuracy_score(y_train, model1.predict(x_train)))\n",
    "print('Test accuracy', accuracy_score(Sample_Submission,model1.predict(x_test_data_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[9147,  156],\n",
       "       [   0,    0]], dtype=int64)"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(Sample_Submission,y_pred_data_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       1.00      0.98      0.99      9303\n",
      "         1.0       0.00      0.00      0.00         0\n",
      "\n",
      "    accuracy                           0.98      9303\n",
      "   macro avg       0.50      0.49      0.50      9303\n",
      "weighted avg       1.00      0.98      0.99      9303\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1248: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1248: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1248: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print((classification_report(Sample_Submission,y_pred_data_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(y_pred_data_test, columns=['prediction'])\n",
    "df.index.name = 'index'\n",
    "df.to_csv('e:y_pred_data_test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Thank you Dphi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "ML_with_titanic_data.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
